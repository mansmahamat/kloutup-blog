'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var Script = require('next/script');
var getConfig = require('next/config');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var Script__default = /*#__PURE__*/_interopDefaultLegacy(Script);
var getConfig__default = /*#__PURE__*/_interopDefaultLegacy(getConfig);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function getCombinations(elements) {
    const combinations = [];
    for (let i = 0; i < elements.length; i++) {
        combinations.push([elements[i]]);
        if (i < elements.length - 1) {
            getCombinations(elements.slice(i + 1)).forEach((combination) => {
                combinations.push([elements[i], ...combination]);
            });
        }
    }
    return combinations;
}

const allModifiers = [
    'exclusions',
    'local',
    'manual',
    'outbound-links',
    'file-downloads',
];
const getScriptPath = (options, ...modifiers) => {
    var _a, _b;
    let basePath = (_a = options.basePath) !== null && _a !== void 0 ? _a : '';
    if (options.subdirectory) {
        basePath += `/${options.subdirectory}`;
    }
    return `${basePath}/js/${[
        (_b = options.scriptName) !== null && _b !== void 0 ? _b : 'script',
        ...modifiers.sort().filter((modifier) => modifier !== null),
    ].join('.')}.js`;
};
const plausibleDomain = 'https://plausible.io';
const getRemoteScriptName = (domain, selfHosted) => selfHosted || domain === plausibleDomain ? 'plausible' : 'index';
const getDomain = (options) => { var _a; return (_a = options.customDomain) !== null && _a !== void 0 ? _a : plausibleDomain; };
const getApiEndpoint = (options) => {
    var _a, _b;
    return `${(_a = options.basePath) !== null && _a !== void 0 ? _a : ''}/${(_b = options.subdirectory) !== null && _b !== void 0 ? _b : 'proxy'}/api/event${options.trailingSlash ? '/' : ''}`;
};
function withPlausibleProxy(options = {}) {
    return (nextConfig) => {
        const nextPlausiblePublicProxyOptions = Object.assign(Object.assign({}, options), { trailingSlash: !!nextConfig.trailingSlash, basePath: nextConfig.basePath });
        return Object.assign(Object.assign({}, nextConfig), { publicRuntimeConfig: Object.assign(Object.assign({}, nextConfig.publicRuntimeConfig), { nextPlausiblePublicProxyOptions }), rewrites: () => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const domain = getDomain(options);
                const getRemoteScript = (...modifiers) => domain +
                    getScriptPath({
                        scriptName: getRemoteScriptName(domain, domain !== plausibleDomain),
                    }, ...modifiers);
                const plausibleRewrites = [
                    {
                        source: getScriptPath(options),
                        destination: getRemoteScript(),
                    },
                    ...getCombinations(allModifiers).map((modifiers) => ({
                        source: getScriptPath(options, ...modifiers),
                        destination: getRemoteScript(...modifiers),
                    })),
                    {
                        source: getApiEndpoint(Object.assign(Object.assign({}, nextPlausiblePublicProxyOptions), { basePath: '' })),
                        destination: `${domain}/api/event`,
                    },
                ];
                if (process.env.NEXT_PLAUSIBLE_DEBUG) {
                    console.log('plausibleRewrites = ', plausibleRewrites);
                }
                const rewrites = yield ((_a = nextConfig.rewrites) === null || _a === void 0 ? void 0 : _a.call(nextConfig));
                if (!rewrites) {
                    return plausibleRewrites;
                }
                else if (Array.isArray(rewrites)) {
                    return rewrites.concat(plausibleRewrites);
                }
                else {
                    rewrites.afterFiles = rewrites.afterFiles.concat(plausibleRewrites);
                    return rewrites;
                }
            }) });
    };
}
function PlausibleProvider(props) {
    var _a, _b;
    const { enabled = process.env.NODE_ENV === 'production' &&
        (!process.env.NEXT_PUBLIC_VERCEL_ENV ||
            process.env.NEXT_PUBLIC_VERCEL_ENV === 'production'), } = props;
    const domain = getDomain(props);
    const proxyOptions = (_b = (_a = getConfig__default["default"]()) === null || _a === void 0 ? void 0 : _a.publicRuntimeConfig) === null || _b === void 0 ? void 0 : _b.nextPlausiblePublicProxyOptions;
    return (React__default["default"].createElement(React__default["default"].Fragment, null,
        enabled && (React__default["default"].createElement(Script__default["default"], Object.assign({ async: true, defer: true, "data-api": proxyOptions ? getApiEndpoint(proxyOptions) : undefined, "data-domain": props.domain, "data-exclude": props.exclude, src: (proxyOptions ? '' : domain) +
                getScriptPath(Object.assign(Object.assign({}, proxyOptions), { scriptName: proxyOptions
                        ? proxyOptions.scriptName
                        : getRemoteScriptName(domain, props.selfHosted) }), props.trackLocalhost ? 'local' : null, props.manualPageviews ? 'manual' : null, props.trackOutboundLinks ? 'outbound-links' : null, props.exclude ? 'exclusions' : null, props.trackFileDownloads ? 'file-downloads' : null), integrity: props.integrity, crossOrigin: props.integrity ? 'anonymous' : undefined }, props.scriptProps))),
        enabled && (React__default["default"].createElement(Script__default["default"], { id: "next-plausible-init", dangerouslySetInnerHTML: {
                __html: `window.plausible = window.plausible || function() { (window.plausible.q = window.plausible.q || []).push(arguments) }`,
            } })),
        props.children));
}
function usePlausible() {
    return React.useCallback(function (eventName, ...rest) {
        var _a, _b;
        return (_b = (_a = window).plausible) === null || _b === void 0 ? void 0 : _b.call(_a, eventName, rest[0]);
    }, []);
}

exports["default"] = PlausibleProvider;
exports.usePlausible = usePlausible;
exports.withPlausibleProxy = withPlausibleProxy;
//# sourceMappingURL=index.js.map
